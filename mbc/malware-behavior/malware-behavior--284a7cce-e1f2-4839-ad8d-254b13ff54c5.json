{
    "type": "bundle",
    "id": "bundle--fee1f570-b8fd-4508-ab54-f08d02cff8db",
    "objects": [
        {
            "type": "malware-behavior",
            "spec_version": "2.1",
            "id": "malware-behavior--284a7cce-e1f2-4839-ad8d-254b13ff54c5",
            "created_by_ref": "identity--b73c59c1-8560-449a-b8d0-c2ce0533c5bf",
            "created": "2019-08-01T00:00:00.000Z",
            "modified": "2024-04-27T00:00:00.000Z",
            "name": "Debugger Detection",
            "obj_defn": {
                "source_name": "mitre-mbc",
                "description": "Malware detects whether it's being executed inside a debugger by checking for artifacts such as DLLs, processes, and registry keys [1]. If malware detects a debugger,  it may change its execution path or change its code to initiate a crash [2].\n\nWhile many methods are listed in the table below, among the most commonly used are:\n- Using APIs such as IsDebuggerPresent, CheckRemoteDebuggerPresent, and OutputDebugString\n- Reading the BeingDebugged bit (is it a 1 or 0) in the Process Environment Block (PEB)\n- Checking whether a software breakpoint instruction is used (INT3; 0xCC opcode)\n\nDetails on detecting debuggers can be found in the references.",
                "url": "https://github.com/MBCProject/mbc-markdown/blob/main/anti-behavioral-analysis/debugger-detection.md",
                "external_id": "B0001"
            },
            "tags": {
                "Anti-Analysis-Type": "Detection"
            },
            "objective_refs": [
                "malware-objective--e263c1d4-d543-4869-9549-f95769105f1c"
            ],
            "detection_rules": [
                {
                    "rule_type": "capa",
                    "rule_name": "check for trap flag exception",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-trap-flag-exception.yml"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check for software breakpoints",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-software-breakpoints.yml",
                    "detect_ref": "malware-method--ac288f75-352d-459a-9d0f-3dc8bc612052"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check process job object",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-process-job-object.yml",
                    "api_fncs": [
                        "kernel32.QueryInformationJobObject",
                        "kernel32.OpenProcess"
                    ]
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check for PEB BeingDebugged flag",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-peb-beingdebugged-flag.yml",
                    "detect_ref": "malware-method--53f5c51c-ad5d-48b4-862d-bd251f918010"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check for time delay via GetTickCount",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-time-delay-via-gettickcount.yml",
                    "detect_ref": "malware-method--5133f892-8ecb-4502-bec6-c4a62d641a9b"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check for protected handle exception",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-protected-handle-exception.yml",
                    "api_fncs": [
                        "SetHandleInformation",
                        "CloseHandle"
                    ],
                    "detect_ref": "malware-method--65d246ed-b32a-4d51-b927-9f46d8ae2139"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check for OutputDebugString error",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-outputdebugstring-error.yml",
                    "api_fncs": [
                        "kernel32.SetLastError",
                        "kernel32.GetLastError",
                        "kernel32.OutputDebugString"
                    ],
                    "detect_ref": "malware-method--a9f83bc8-a129-4acf-aa11-a4abf89c7bc5"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check for unexpected memory writes",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-unexpected-memory-writes.yml",
                    "api_fncs": [
                        "kernel32.GetWriteWatch"
                    ],
                    "detect_ref": "malware-method--9db9fdb1-fecb-4b37-b4eb-9ab8aa8372b1"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check for kernel debugger via shared user data structure",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-kernel-debugger-via-shared-user-data-structure.yml"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check for time delay via QueryPerformanceCounter",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-time-delay-via-queryperformancecounter.yml",
                    "detect_ref": "malware-method--d68a5e9c-0ca4-4cc5-a9ad-856f21fb2b56"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check for hardware breakpoints",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-hardware-breakpoints.yml",
                    "api_fncs": [
                        "kernel32.GetThreadContext"
                    ],
                    "detect_ref": "malware-method--55254629-8ead-4b2b-8e4a-2d5e4c8b4492"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check ProcessDebugPort",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-processdebugport.yml",
                    "api_fncs": [
                        "NtQueryInformationProcess"
                    ],
                    "detect_ref": "malware-method--1a81c3f9-226f-4088-bf32-3728958e8aff"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check for debugger via API",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-debugger-via-api.yml",
                    "api_fncs": [
                        "kernel32.CheckRemoteDebuggerPresent",
                        "WUDFPlatform.WudfIsAnyDebuggerPresent",
                        "WUDFPlatform.WudfIsKernelDebuggerPresent",
                        "WUDFPlatform.WudfIsUserDebuggerPresent"
                    ],
                    "detect_ref": "malware-method--171ef35e-f033-4c37-a01c-115fcf2d2393"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check for debugger via API",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-debugger-via-api.yml",
                    "api_fncs": [
                        "kernel32.CheckRemoteDebuggerPresent",
                        "WUDFPlatform.WudfIsAnyDebuggerPresent",
                        "WUDFPlatform.WudfIsKernelDebuggerPresent",
                        "WUDFPlatform.WudfIsUserDebuggerPresent"
                    ],
                    "detect_ref": "malware-method--d575197c-ba13-4570-ada1-4d5f3a416484"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "check for PEB NtGlobalFlag flag",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/check-for-peb-ntglobalflag-flag.yml",
                    "detect_ref": "malware-method--f5c760be-fa9f-416c-9d74-2239aec262e1"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "execute anti-debugging instructions",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-debugging/debugger-detection/execute-anti-debugging-instructions.yml",
                    "detect_ref": "malware-method--d4895eb5-d380-4592-bde5-6865a26cb75b"
                },
                {
                    "rule_type": "capa",
                    "rule_name": "PEB access",
                    "url": "https://github.com/mandiant/capa-rules/blob/master/lib/peb-access.yml",
                    "detect_ref": "malware-method--71b29d14-ca63-4cb3-9495-1a9345eec2c6"
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_checkremotedebuggerpresent",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_checkremotedebuggerpresent.py",
                    "api_fncs": [
                        "CheckRemoteDebuggerPresent",
                        "NtQueryInformationProcess"
                    ]
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antiav_nthookengine_libs",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_nthookengine_libs.py",
                    "api_fncs": [
                        "LdrGetDllHandle",
                        "LdrLoadDll"
                    ]
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antiav_nthookengine_libs",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_nthookengine_libs.py",
                    "api_fncs": [
                        "LdrGetDllHandle",
                        "LdrLoadDll"
                    ],
                    "detect_ref": "malware-method--2760bc6c-094b-48e7-8e6d-d712066f3ea6"
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_setunhandledexceptionfilter",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_setunhandledexceptionfilter.py",
                    "api_fncs": [
                        "SetUnhandledExceptionFilter"
                    ]
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_setunhandledexceptionfilter",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_setunhandledexceptionfilter.py",
                    "api_fncs": [
                        "SetUnhandledExceptionFilter"
                    ],
                    "detect_ref": "malware-method--8024da4d-371a-4515-9f7f-63a5a3930c37"
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_addvectoredexceptionhandler",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_addvectoredexceptionhandler.py",
                    "api_fncs": [
                        "AddVectoredExceptionHandler"
                    ]
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_outputdebugstring",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_outputdebugstring.py",
                    "api_fncs": [
                        "GetLastError",
                        "SetLastError",
                        "OutputDebugStringW",
                        "OutputDebugStringA"
                    ]
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_outputdebugstring",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_outputdebugstring.py",
                    "api_fncs": [
                        "GetLastError",
                        "SetLastError",
                        "OutputDebugStringW",
                        "OutputDebugStringA"
                    ],
                    "detect_ref": "malware-method--a9f83bc8-a129-4acf-aa11-a4abf89c7bc5"
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_gettickcount",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_gettickcount.py",
                    "api_fncs": [
                        "GetTickCount"
                    ]
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_gettickcount",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_gettickcount.py",
                    "api_fncs": [
                        "GetTickCount"
                    ],
                    "detect_ref": "malware-method--5133f892-8ecb-4502-bec6-c4a62d641a9b"
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_guardpages",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_guardpages.py",
                    "api_fncs": [
                        "VirtualProtectEx",
                        "NtAllocateVirtualMemory",
                        "NtProtectVirtualMemory"
                    ]
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_guardpages",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_guardpages.py",
                    "api_fncs": [
                        "VirtualProtectEx",
                        "NtAllocateVirtualMemory",
                        "NtProtectVirtualMemory"
                    ],
                    "detect_ref": "malware-method--abe07b63-1b26-4746-9ec8-e3aedac21dc4"
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_ntsetinformationthread",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_ntsetinformationthread.py",
                    "api_fncs": [
                        "NtSetInformationThread"
                    ]
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_ntsetinformationthread",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_ntsetinformationthread.py",
                    "api_fncs": [
                        "NtSetInformationThread"
                    ],
                    "detect_ref": "malware-method--a9a58c99-c36d-492f-8843-f57edb2f2a8d"
                },
                {
                    "rule_type": "cape",
                    "rule_name": "antidebug_debugactiveprocess",
                    "url": "https://github.com/CAPESandbox/community/tree/master/modules/signatures/windows/antidebug_debugactiveprocess.py",
                    "api_fncs": [
                        "DebugActiveProcess"
                    ]
                }
            ],
            "obj_version": "2.3",
            "external_references": [
                {
                    "source_name": "checkpoint",
                    "description": "Check Point Research, \"CP<r>: Evasion Techniques,\" evasions.checkpoint.com, [Online].",
                    "url": "https://evasions.checkpoint.com"
                },
                {
                    "source_name": "sikorski-book",
                    "description": "M. Sikorski and A. Honig, Practical Malware Analysis: The Hands-On Guide to Dissecting Malicious Software, No Starch Press, 2012."
                },
                {
                    "source_name": "ferrie",
                    "description": "P. Ferrie, \"The Ultimate Anti-Debugging Reference,\" May 4, 2011 [Online].",
                    "url": "https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf"
                },
                {
                    "source_name": "fireeye-vmaware",
                    "description": "\"The Dead Giveaways of VM-Aware Malware,\" FireEye, Jan 2011.",
                    "url": "https://web.archive.org/web/20160927120026/https://web.archive.org/web/20200815134441/https://www.fireeye.com/blog/threat-research/2011/01/the-dead-giveaways-of-vm-aware-malware.html"
                },
                {
                    "source_name": "lordnoteworthy",
                    "description": "A. Faouzi (LordNoteworthy), \"README.md,\" Al-Khaser v0.81. Accessed Apr. 29, 2023 [Online].",
                    "url": "https://github.com/LordNoteworthy/al-khaser"
                },
                {
                    "source_name": "falliere-antidebug",
                    "description": "N. Falliere, \"Windows Anti-Debug Reference,\" Symantec, Sep 11, 2007.",
                    "url": "https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=230d68b2-c80f-4436-9c09-ff84d049da33&CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&tab=librarydocuments"
                },
                {
                    "source_name": "lordnoteworthy",
                    "description": "A. Faouzi (LordNoteworthy), \"README.md,\" Al-Khaser v0.81. Accessed Apr. 29, 2023 [Online].",
                    "url": "https://github.com/LordNoteworthy/al-khaser"
                },
                {
                    "source_name": "mendrez",
                    "description": "R. Mendrez, \"Gamut Spambot Analysis,\" Trustwave, blog, Mar. 4, 2014 [Online].",
                    "url": "https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/gamut-spambot-analysis/"
                },
                {
                    "source_name": "baker",
                    "description": "B. Baker and A. Chiu, \"Threat Spotlight: Rombertik - Gazing Past the Smoke, Mirrors, and Trapdoors,\" Cisco Threat Research, blog, May 4, 2013 [Online].",
                    "url": "https://blogs.cisco.com/security/talos/rombertik"
                },
                {
                    "source_name": "fireeye-poisonivy",
                    "description": "\"Poison Ivy: Assessing Damange and Extracting Intelligence,\" FireEye, Special Report, 2014 [Online].",
                    "url": "https://www.mandiant.com/sites/default/files/2021-09/rpt-poison-ivy.pdf"
                },
                {
                    "source_name": "dong-matanbuchus",
                    "description": "C. Dong, \"MATANBUCHUS: Another Loader as a Service Malware,\" Offset Training Solutions, blog, Feb. 15, 2022 [Online].",
                    "url": "https://www.0ffset.net/reverse-engineering/matanbuchus-loader-analysis/"
                },
                {
                    "source_name": "cohen-matabuchus",
                    "description": "B. Cohen, \"Inside Matanbuchus: A Quirky Loader,\" CyberArk, blog, Jul. 26, 2022 [Online].",
                    "url": "https://www.cyberark.com/resources/threat-research-blog/inside-matanbuchus-a-quirky-loader"
                },
                {
                    "source_name": "zhang-poisonivy",
                    "description": "X. Zhang, \"Deep Analysis of New Poison Ivy Variant,\" Fortiguard Labs Threat Research, Aug. 23, 2017 [Online].",
                    "url": "https://www.fortinet.com/blog/threat-research/deep-analysis-of-new-poison-ivy-variant"
                },
                {
                    "source_name": "vaish-ursnif",
                    "description": "A. Vaish and S. Nemes, \"Newly Observed Ursnif Variant Employs Malicious TLS Callback Technique to Achieve Process Injection,\" FireEye, Nov. 28, 2017.",
                    "url": "https://web.archive.org/web/20171204024018/https://www.fireeye.com/blog/threat-research/2017/11/ursnif-variant-malicious-tls-callback-technique.html"
                },
                {
                    "source_name": "capa analysis",
                    "description": "Analysis output, capa 4.0, analyzed at MITRE on Oct. 12, 2022.",
                    "url": "https://github.com/mandiant/capa-rules"
                }
            ],
            "object_marking_refs": [
                "marking-definition--093b6375-cd45-4aa3-8f91-6a03ddd7a3d3"
            ],
            "extensions": {
                "extension-definition--d57b7c9c-7fa6-436b-b82c-8e6f69cdc3d0": {
                    "extension_type": "new-sdo"
                }
            }
        }
    ]
}